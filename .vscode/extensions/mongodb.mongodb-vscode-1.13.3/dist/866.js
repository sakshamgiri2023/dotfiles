"use strict";exports.id=866,exports.ids=[866],exports.modules={54866:(e,n,r)=>{r.d(n,{fromIni:()=>u});var o=r(60441),t=r(24305),i=r(72433);const s=e=>(0,i.g)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),a=(e,{profile:n,logger:r})=>{const o="string"==typeof e.source_profile&&void 0===e.credential_source;return o&&r?.debug?.(`    ${n} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),o},l=(e,{profile:n,logger:r})=>{const o="string"==typeof e.credential_source&&void 0===e.source_profile;return o&&r?.debug?.(`    ${n} isCredentialSourceProfile credential_source=${e.credential_source}`),o},c=async(e,n,a,l={})=>{a.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const c=n[e],{source_profile:g,region:f}=c;if(!a.roleAssumer){const{getDefaultRoleAssumer:e}=await Promise.all([r.e(735),r.e(224)]).then(r.bind(r,81224));a.roleAssumer=e({...a.clientConfig,credentialProviderLogger:a.logger,parentClientConfig:{...a?.parentClientConfig,region:f??a?.parentClientConfig?.region}},a.clientPlugins)}if(g&&g in l)throw new t.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,o.Bz)(a)}. Profiles visited: `+Object.keys(l).join(", "),{logger:a.logger});a.logger?.debug("@aws-sdk/credential-provider-ini - finding credential resolver using "+(g?`source_profile=[${g}]`:`profile=[${e}]`));const u=g?_(g,n,a,{...l,[g]:!0},d(n[g]??{})):(await((e,n,o)=>{const i={EcsContainer:async e=>{const{fromHttp:n}=await r.e(387).then(r.bind(r,63387)),{fromContainerMetadata:i}=await r.e(418).then(r.bind(r,49418));return o?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,t.cy)(n(e??{}),i(e))().then(s)},Ec2InstanceMetadata:async e=>{o?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata:n}=await r.e(418).then(r.bind(r,49418));return async()=>n(e)().then(s)},Environment:async e=>{o?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv:n}=await Promise.resolve().then(r.bind(r,42599));return async()=>n(e)().then(s)}};if(e in i)return i[e];throw new t.C1(`Unsupported credential source in profile ${n}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:o})})(c.credential_source,e,a.logger)(a))();if(d(c))return u.then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o")));{const n={RoleArn:c.role_arn,RoleSessionName:c.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:c.external_id,DurationSeconds:parseInt(c.duration_seconds||"3600",10)},{mfa_serial:r}=c;if(r){if(!a.mfaCodeProvider)throw new t.C1(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:a.logger,tryNextLink:!1});n.SerialNumber=r,n.TokenCode=await a.mfaCodeProvider(r)}const o=await u;return a.roleAssumer(o,n).then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o")))}},d=e=>!e.role_arn&&!!e.credential_source,g=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,f=async(e,n)=>{n?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");const r={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,i.g)(r,"CREDENTIALS_PROFILE","n")},_=async(e,n,o,s={},d=!1)=>{const _=n[e];if(Object.keys(s).length>0&&g(_))return f(_,o);if(d||((e,{profile:n="default",logger:r}={})=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(a(e,{profile:n,logger:r})||l(e,{profile:n,logger:r})))(_,{profile:e,logger:o.logger}))return c(e,n,o,s);if(g(_))return f(_,o);if(u=_,Boolean(u)&&"object"==typeof u&&"string"==typeof u.web_identity_token_file&&"string"==typeof u.role_arn&&["undefined","string"].indexOf(typeof u.role_session_name)>-1)return(async(e,n)=>r.e(754).then(r.bind(r,13754)).then((({fromTokenFile:r})=>r({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:n.roleAssumerWithWebIdentity,logger:n.logger,parentClientConfig:n.parentClientConfig})().then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))))))(_,o);var u;if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.credential_process)(_))return(async(e,n)=>r.e(738).then(r.bind(r,80738)).then((({fromProcess:r})=>r({...e,profile:n})().then((e=>(0,i.g)(e,"CREDENTIALS_PROFILE_PROCESS","v"))))))(o,e);if((e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name))(_))return await(async(e,n,o={})=>{const{fromSSO:t}=await r.e(852).then(r.bind(r,59852));return t({profile:e,logger:o.logger,parentClientConfig:o.parentClientConfig,clientConfig:o.clientConfig})().then((e=>n.sso_session?(0,i.g)(e,"CREDENTIALS_PROFILE_SSO","r"):(0,i.g)(e,"CREDENTIALS_PROFILE_SSO_LEGACY","t")))})(e,_,o);throw new t.C1(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:o.logger})},u=(e={})=>async({callerClientConfig:n}={})=>{const r={...e,parentClientConfig:{...n,...e.parentClientConfig}};r.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const t=await(0,o.YU)(r);return _((0,o.Bz)({profile:e.profile??n?.profile}),t,r)}}};
//# sourceMappingURL=866.js.map