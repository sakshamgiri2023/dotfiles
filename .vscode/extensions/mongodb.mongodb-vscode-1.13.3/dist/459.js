"use strict";exports.id=459,exports.ids=[459],exports.modules={48459:(e,t,n)=>{n.d(t,{getInstanceMetadataEndpoint:()=>l,httpRequest:()=>s});var o=n(82937),a=(n(87016),n(20181)),r=n(58611);function s(e){return new Promise(((t,n)=>{const s=(0,r.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});s.on("error",(e=>{n(Object.assign(new o.mZ("Unable to connect to instance metadata service"),e)),s.destroy()})),s.on("timeout",(()=>{n(new o.mZ("TimeoutError from instance metadata service")),s.destroy()})),s.on("response",(e=>{const{statusCode:r=400}=e;(r<200||300<=r)&&(n(Object.assign(new o.mZ("Error response received from instance metadata service"),{statusCode:r})),s.destroy());const c=[];e.on("data",(e=>{c.push(e)})),e.on("end",(()=>{t(a.Buffer.concat(c)),s.destroy()}))})),s.end()}))}var c=n(72092);o.C1;var i,d=n(81086);!function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"}(i||(i={}));const v={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT,configFileSelector:e=>e.ec2_metadata_service_endpoint,default:void 0};var m;!function(e){e.IPv4="IPv4",e.IPv6="IPv6"}(m||(m={}));const u={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE,configFileSelector:e=>e.ec2_metadata_service_endpoint_mode,default:m.IPv4},l=async()=>(0,d.D)(await p()||await E()),p=async()=>(0,c.Z)(v)(),E=async()=>{const e=await(0,c.Z)(u)();switch(e){case m.IPv4:return i.IPv4;case m.IPv6:return i.IPv6;default:throw new Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(m)}`)}}}};
//# sourceMappingURL=459.js.map